name: 🧪 CI Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: 🧪 Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: 🔧 Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
    
    - name: 📦 Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 🔍 Lint with flake8
      run: |
        pip install flake8
        # 停止構建如果有 Python 語法錯誤或未定義名稱
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # 將所有其他問題視為警告，GitHub 編輯器為 127 字符寬
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: 🧪 Run unit tests
      run: |
        python test_bot.py
    
    - name: 📊 Upload coverage reports
      uses: codecov/codecov-action@v4
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  docker-test:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: read
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔨 Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: ghcr.io/yujun-bo2/music-bot:test
        cache-from: type=gha
        cache-to: type=gha,mode=max