name: 🚀 Deploy Discord Music Bot

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # 允許手動觸發

permissions:
  contents: read
  packages: write
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 🧪 測試階段
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 🧪 Run unit tests
      run: |
        python test_bot.py
    
    - name: 📊 Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: test-results/

  # 🔨 構建階段
  build:
    name: 🔨 Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
      id-token: write
    
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
      changed: ${{ steps.changes.outputs.changed }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2  # 需要比較前一個提交
    
    - name: � Check for changes
      id: changes
      run: |
        if git diff --quiet HEAD~1 HEAD -- . ':!README.md' ':!docs/' ':!.github/workflows/ci.yml'; then
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "No significant changes detected"
        else
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "Changes detected, will build new image"
        fi
    
    - name: �🔧 Set up Docker Buildx
      if: steps.changes.outputs.changed == 'true'
      uses: docker/setup-buildx-action@v3
    
    - name: 🔑 Log in to Container Registry
      if: steps.changes.outputs.changed == 'true'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 📦 Set repository permissions
      run: |
        echo "Setting repository permissions for GHCR package"
    
    - name: 🏷️ Extract metadata
      if: steps.changes.outputs.changed == 'true'
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=Discord Music Bot
          org.opencontainers.image.description=A Discord music bot with YouTube and Spotify support
          org.opencontainers.image.vendor=${{ github.repository_owner }}
    
    - name: 🔨 Build and push Docker image
      if: steps.changes.outputs.changed == 'true'
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
        build-args: |
          BUILDKIT_INLINE_CACHE=1
    
    - name: 📝 Output image
      id: image
      run: |
        if [ "${{ steps.changes.outputs.changed }}" == "true" ]; then
          echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT
        else
          echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT
          echo "Using existing image (no changes detected)"
        fi

  # 🚀 部署階段
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && vars.DEPLOY_HOST != ''
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Deploy to server via SSH
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ vars.DEPLOY_HOST }}
        username: ${{ vars.DEPLOY_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ vars.DEPLOY_PORT || 22 }}
        script: |
          # 更新系統
          sudo apt-get update
          
          # 安裝 Docker 和 Docker Compose（如果還沒安裝）
          if ! command -v docker &> /dev/null; then
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker $USER
          fi
          
          if ! command -v docker-compose &> /dev/null; then
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          
          # 創建應用目錄
          mkdir -p ~/discord-music-bot
          cd ~/discord-music-bot
          
          # 下載最新的 docker-compose.yml
          curl -o docker-compose.yml https://raw.githubusercontent.com/${{ github.repository }}/main/docker-compose.yml
          
          # 創建 .env 文件
          cat > .env << 'EOF'
          DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}
          COMMAND_PREFIX=${{ vars.COMMAND_PREFIX || '/' }}
          MAX_QUEUE_SIZE=${{ vars.MAX_QUEUE_SIZE || '100' }}
          MAX_HISTORY_SIZE=${{ vars.MAX_HISTORY_SIZE || '50' }}
          EXTRACT_TIMEOUT=${{ vars.EXTRACT_TIMEOUT || '30' }}
          KEEPALIVE_INTERVAL=${{ vars.KEEPALIVE_INTERVAL || '240' }}
          SSH_HOST=${{ vars.SSH_HOST }}
          SSH_PORT=${{ vars.SSH_PORT || '22' }}
          SSH_USER=${{ vars.SSH_USER }}
          ALLOWED_IDS=${{ vars.ALLOWED_IDS }}
          SSH_KEY_FILE=/app/ssh_key
          EOF
          
          # 創建 SSH 私鑰文件（用於遠端功能，如果提供）
          if [ ! -z "${{ secrets.SSH_REMOTE_KEY }}" ]; then
            echo '${{ secrets.SSH_REMOTE_KEY }}' > ssh_key
            chmod 600 ssh_key
          fi
          
          # 拉取最新映像
          docker-compose pull
          
          # 停止現有容器
          docker-compose down
          
          # 啟動新容器
          docker-compose up -d
          
          # 清理未使用的映像
          docker image prune -f
          
          # 顯示容器狀態
          docker-compose ps
          docker-compose logs --tail=50
          
          # 等待容器啟動
          sleep 10
          
          # 檢查機器人健康狀態
          echo "=== 檢查機器人健康狀態 ==="
          if docker-compose ps | grep -q "Up"; then
            echo "✅ 容器正在運行"
            # 檢查機器人日誌中是否有成功連接的訊息
            if docker-compose logs music-bot | grep -i "logged in\|ready\|connected" | tail -5; then
              echo "✅ 機器人似乎已成功連接到 Discord"
            else
              echo "⚠️  未在日誌中找到連接成功的訊息"
              echo "最近的日誌："
              docker-compose logs music-bot --tail=10
            fi
          else
            echo "❌ 容器未正常運行"
            docker-compose logs music-bot --tail=20
            exit 1
          fi

  # 📊 通知階段
  notify:
    name: 📊 Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    if: always()
    
    steps:
    - name: 📊 Notify Success
      if: ${{ needs.deploy.result == 'success' }}
      run: |
        echo "🎉 部署成功！"
        echo "映像: ${{ needs.build.outputs.image }}"
        echo "摘要: ${{ needs.build.outputs.digest }}"
    
    - name: ❌ Notify Failure
      if: ${{ needs.deploy.result == 'failure' || needs.build.result == 'failure' || needs.test.result == 'failure' }}
      run: |
        echo "❌ 部署失敗！"
        echo "測試結果: ${{ needs.test.result }}"
        echo "構建結果: ${{ needs.build.result }}"
        echo "部署結果: ${{ needs.deploy.result }}"